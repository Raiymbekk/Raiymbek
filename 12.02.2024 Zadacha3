using System;

// Базовый класс Vehicle
public class Vehicle
{
    // Общие характеристики транспортного средства
    public string Make { get; set; } // Марка
    public string Model { get; set; } // Модель
    public int Year { get; set; } // Год выпуска

    // Конструктор класса Vehicle
    public Vehicle(string make, string model, int year)
    {
        Make = make;
        Model = model;
        Year = year;
    }

    // Метод для вывода информации о транспортном средстве
    public virtual void DisplayInfo()
    {
        Console.WriteLine($"Make: {Make}, Model: {Model}, Year: {Year}");
    }
}

// Класс Car наследует от Vehicle
public class Car : Vehicle
{
    // Уникальные характеристики для автомобиля
    public int NumberOfDoors { get; set; } // Количество дверей
    public string TransmissionType { get; set; } // Тип трансмиссии

    // Конструктор класса Car
    public Car(string make, string model, int year, int numberOfDoors, string transmissionType)
        : base(make, model, year)
    {
        NumberOfDoors = numberOfDoors;
        TransmissionType = transmissionType;
    }

    // Переопределение метода DisplayInfo для автомобиля
    public override void DisplayInfo()
    {
        base.DisplayInfo(); // Вызываем метод DisplayInfo базового класса
        Console.WriteLine($"Number of doors: {NumberOfDoors}, Transmission type: {TransmissionType}");
    }
}

// Класс Bicycle наследует от Vehicle
public class Bicycle : Vehicle
{
    // Уникальные характеристики для велосипеда
    public int NumberOfGears { get; set; } // Количество передач

    // Конструктор класса Bicycle
    public Bicycle(string make, string model, int year, int numberOfGears)
        : base(make, model, year)
    {
        NumberOfGears = numberOfGears;
    }

    // Переопределение метода DisplayInfo для велосипеда
    public override void DisplayInfo()
    {
        base.DisplayInfo(); // Вызываем метод DisplayInfo базового класса
        Console.WriteLine($"Number of gears: {NumberOfGears}");
    }
}

// Класс Boat наследует от Vehicle
public class Boat : Vehicle
{
    // Уникальные характеристики для лодки
    public string HullMaterial { get; set; } // Материал корпуса
    public double MaxSpeed { get; set; } // Максимальная скорость

    // Конструктор класса Boat
    public Boat(string make, string model, int year, string hullMaterial, double maxSpeed)
        : base(make, model, year)
    {
        HullMaterial = hullMaterial;
        MaxSpeed = maxSpeed;
    }

    // Переопределение метода DisplayInfo для лодки
    public override void DisplayInfo()
    {
        base.DisplayInfo(); // Вызываем метод DisplayInfo базового класса
        Console.WriteLine($"Hull material: {HullMaterial}, Max speed: {MaxSpeed} knots");
    }
}

class Program
{
    static void Main(string[] args)
    {
        // Пример использования
        Car car = new Car("Toyota", "Camry", 2022, 4, "Automatic");
        Console.WriteLine("Car:");
        car.DisplayInfo();

        Bicycle bicycle = new Bicycle("Giant", "Defy", 2020, 21);
        Console.WriteLine("\nBicycle:");
        bicycle.DisplayInfo();

        Boat boat = new Boat("Bayliner", "185", 2018, "Fiberglass", 40.5);
        Console.WriteLine("\nBoat:");
        boat.DisplayInfo();
    }
}
